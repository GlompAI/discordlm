name: CI/CD - Build, Push, and Deploy

on:
  push:
    branches: [ "main", "prod" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/glompai/discordlm:${{ github.sha }}
            ghcr.io/glompai/discordlm:latest

  deploy-qa-binary:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    container: denoland/deno:2.3.3
    environment: qa

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compile application
        run: |
          deno compile --unstable-kv --allow-net --allow-env --allow-read --allow-write --output dist/discordlm src/main.ts

      - name: Install SSH and rsync
        run: |
          apt-get update && apt-get install -y openssh-client rsync wget
          wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cloudflared
          chmod +x cloudflared

      - name: Create .env.qa from secret
        run: |
          echo "${{ secrets.ENV_QA_FILE_CONTENT }}" > .env.qa

      - name: Copy binary and cloudflared to server
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_QA }}" > private_key.pem
          chmod 600 private_key.pem
          rsync -avz -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" dist/discordlm heni@ooo.observer:/home/heni/discordlm/discordlm
          rsync -avz -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" cloudflared heni@ooo.observer:/home/heni/discordlm/
          rsync -avz -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" .env.qa heni@ooo.observer:/home/heni/discordlm/

      - name: Deploy to remote server
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_QA }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no heni@ooo.observer " \
            systemctl --user stop discordlm.service || true && \
            pkill -f discordlm || true && \
            rm -f /home/heni/discordlm/discordlm && \
            mkdir -p .cloudflared && \
            echo '${{ secrets.CLOUDFLARE_CREDENTIALS_FILE_CONTENT }}' > .cloudflared/22663346-58e3-4a55-ba33-02577e175488.json && \
            systemctl --user start discordlm.service"

  deploy-prod:
    needs: build-and-push
    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.glomp.ai
          method: jwt
          role: prod
          secrets: |
            secret/data/prod BOT_TOKEN | BOT_TOKEN ;
            secret/data/prod GEMINI_API_KEY | GEMINI_API_KEY ;
            secret/data/prod OPENAI_API_KEY | OPENAI_API_KEY

      - name: Replace image tag in deployment yaml
        env:
          DEPLOYMENT_NAME: discordlm-deployment-prod
          SECRET_NAME: discordlm-secrets-prod
          CONFIG_MAP_NAME: discordlm-config-prod
        run: |
          export IMAGE_TAG=${{ github.sha }}
          export DEPLOYMENT_NAME
          export SECRET_NAME
          export CONFIG_MAP_NAME
          envsubst < k8s-deployment.yaml > k8s-deployment.yaml.tmp && mv k8s-deployment.yaml.tmp k8s-deployment.yaml

      - name: Copy deployment file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "k8s-deployment.yaml,k8s-config.yaml"
          target: "/root/discordlm/"

      - name: Deploy to remote server
        uses: appleboy/ssh-action@master
        env:
          DEPLOYMENT_NAME: discordlm-deployment-prod
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            k3s kubectl delete secret docker-registry regcred --ignore-not-found
            k3s kubectl create secret docker-registry regcred \
              --docker-server=ghcr.io \
              --docker-username=${{ github.actor }} \
              --docker-password=${{ secrets.GHCR_TOKEN }} \
              -o yaml | k3s kubectl apply -f - --overwrite --force
            k3s kubectl delete secret discordlm-secrets-prod --ignore-not-found
            k3s kubectl create secret generic discordlm-secrets-prod \
              --from-literal=BOT_TOKEN=${{ env.BOT_TOKEN }} \
              --from-literal=GEMINI_API_KEY=${{ env.GEMINI_API_KEY }} \
              --from-literal=OPENAI_API_KEY=${{ env.OPENAI_API_KEY }} \
              --from-literal=GEMINI_BASE_URL=${{ secrets.GEMINI_BASE_URL }} \
              -o yaml | k3s kubectl apply -f - --overwrite
            k3s kubectl delete configmap discordlm-config-prod --ignore-not-found
            k3s kubectl create configmap discordlm-config-prod \
              --from-literal=OPENAI_BASE_URL="${{ vars.OPENAI_BASE_URL }}" \
              --from-literal=ADMIN_OVERRIDE_ID="${{ vars.ADMIN_OVERRIDE_ID }}" \
              --from-literal=USER_ID_LIST="${{ vars.USER_ID_LIST }}" \
              --from-literal=LIMIT_USER_IDS="${{ vars.LIMIT_USER_IDS }}" \
              --from-literal=GEMINI_TOKEN_LIMIT="${{ vars.GEMINI_TOKEN_LIMIT }}" \
              --from-literal=OPENAI_TOKEN_LIMIT="${{ vars.OPENAI_TOKEN_LIMIT }}" \
              --from-literal=RATE_LIMIT_PER_MINUTE="${{ vars.RATE_LIMIT_PER_MINUTE }}" \
              --from-literal=DEBUG="${{ vars.DEBUG }}" \
              --from-literal=MAX_HISTORY_MESSAGES="${{ vars.MAX_HISTORY_MESSAGES }}" \
              -o yaml | k3s kubectl apply -f -
            k3s kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "regcred"}]}'
            sleep 5
            k3s kubectl delete deployment ${{ env.DEPLOYMENT_NAME }} --ignore-not-found
            k3s kubectl apply -f /root/discordlm/k8s-deployment.yaml
            k3s kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}